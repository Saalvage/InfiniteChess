@page "/"
@using MoonSharp.Interpreter
@using InfiniteChess.Shared
@using System.Text
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<PageTitle>Index</PageTitle>

<style>
	.chess-board { border-spacing: 0; border-collapse: collapse; }
	.chess-board th { padding: .5em; }
	.chess-board th + th { border-bottom: 1px solid #000; }
	.chess-board th:first-child,
	.chess-board td:last-child { border-right: 1px solid #000; }
	.chess-board tr:last-child td { border-bottom: 1px solid; }
	.chess-board th:empty { border: none; }
	.chess-board td { width: 1.5em; height: 1.5em; text-align: center; font-size: 32px; line-height: 0; background-size: contain; }
	.chess-board .light { background: #eee; }
	.chess-board .dark { background: #aaa; }
	.clicked.light { background: green; }
	.clicked.dark { background: darkgreen; }
	.can-move.light { background: lightskyblue; }
	.can-move.dark { background: blue; }
</style>

<table class="chess-board">
    <tbody>
    <tr>
	    <th></th>
		@for (var i = 0; i < _board.Width; i++) {
			<th>
				@((char)('a' + i))
			</th>
		}
    </tr>
    @for (var row = _board.Height - 1; row >= 0; row--) {
	    <tr>
		    <th>@(row + 1)</th>
		    @for (var col = 0; col < _board.Width; col++) {
			    var colCopy = col;
			    var rowCopy = row;
			    <td class="@((row + col) % 2 == 0 ? "light" : "dark") @(_visualClasses[colCopy, rowCopy])"
			        style="@(_board.Pieces[col, row] is { } piece ?
				               $"background-image: url('{PieceData.Basics[piece.Name].GetImageUrl(piece.Color)}');" : "")"
				@onclick="_ => ClickOn(colCopy, rowCopy)">
			    </td>
		    }
	    </tr>
	}
    </tbody>
</table>

<textarea cols="100" rows="20" @bind="_value">
function canMove(color, x, y, toX, toY)
	if BOARDS[1][toX][toY] == EMPTY_SQUARE then
		return true
	end
	return false
end
</textarea>

<button @onclick="Update">Poggers Button</button>

@_output

@code {
	private HubConnection _connection;

	private (int x, int y)? _clicked = null;

	private string[,] _visualClasses;

	private Board _board = new(
	new Piece?[8,10]
	);

	private Script _script;
	private string _value;
	private string _output;

	private readonly DynValue SCRIPT_WHITE = DynValue.NewNumber(1);
	private readonly DynValue SCRIPT_BLACK = DynValue.NewNumber(0);

	protected override async Task OnInitializedAsync() {
		_connection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri("/chat"))
			.AddNewtonsoftJsonProtocol()
			.Build();

		_connection.On<Board>("ReceiveBoard", x => {
			_board = x;
			StateHasChanged();
			GenerateScriptBoard();
		});

		await _connection.StartAsync();
	}

	protected override void OnInitialized() {
		foreach (var i in Enumerable.Range(0, _board.Pieces.GetLength(0))) {
			_board.Add(new("pawn", Piece.Colors.White), i, 1);
			_board.Add(new("pawn", Piece.Colors.Black), i, _board.Height - 2);
		}
		
		_board.Add(new("rook", Piece.Colors.White), 0, 0);
		_board.Add(new("rook", Piece.Colors.White), _board.Width - 1, 0);
		_board.Add(new("rook", Piece.Colors.Black), 0, _board.Height - 1);
		_board.Add(new("rook", Piece.Colors.Black), _board.Width - 1, _board.Height - 1);

		_board.Add(new("knight", Piece.Colors.White), 1, 0);
		_board.Add(new("knight", Piece.Colors.White), _board.Width - 2, 0);
		_board.Add(new("knight", Piece.Colors.Black), 1, _board.Height - 1);
		_board.Add(new("knight", Piece.Colors.Black), _board.Width - 2, _board.Height - 1);

		_board.Add(new("bishop", Piece.Colors.White), 2, 0);
		_board.Add(new("bishop", Piece.Colors.White), _board.Width - 3, 0);
		_board.Add(new("bishop", Piece.Colors.Black), 2, _board.Height - 1);
		_board.Add(new("bishop", Piece.Colors.Black), _board.Width - 3, _board.Height - 1);

		_board.Add(new("queen", Piece.Colors.White), 3, 0);
		_board.Add(new("king", Piece.Colors.White), _board.Width - 4, 0);
		_board.Add(new("queen", Piece.Colors.Black), 3, _board.Height - 1);
		_board.Add(new("king", Piece.Colors.Black), _board.Width - 4, _board.Height - 1);

		_visualClasses = new string[_board.Pieces.GetLength(0), _board.Pieces.GetLength(1)];
		_visualClasses.Fill("");

		_script = new(CoreModules.Preset_HardSandbox) {
			Options = {
				Stdin = Stream.Null,
			},
		};
		UserData.RegisterType<Position>();
		_script.Globals.Set("WHITE", SCRIPT_WHITE);
		_script.Globals.Set("BLACK", SCRIPT_BLACK);
		_script.DoString(@"
			EMPTY_SQUARE = {}
			BOARD = {}

			function isValidPosition(x, y)
				return x >= 1 and y >= 1 and x <= BOARD_WIDTH and y <= BOARD_HEIGHT
			end
		");

		GenerateScriptBoard();
	}

	private void GenerateScriptBoard() {
		var sb = new StringBuilder();
		sb.AppendLine($"BOARD_WIDTH = {_board.Pieces.GetLength(0)}");
		sb.AppendLine($"BOARD_HEIGHT = {_board.Pieces.GetLength(1)}");
		for (var x = 0; x < _board.Pieces.GetLength(0); x++) {
			sb.AppendLine($"BOARD[{x + 1}] = {{}}");
			for (var y = 0; y < _board.Pieces.GetLength(1); y++) {
				if (_board.Pieces[x, y] is { } piece) {
					sb.AppendLine($"BOARD[{x + 1}][{y + 1}] = {{name = '{piece.Name}', color = {piece.Color:D}}}");
				} else {
					sb.AppendLine($"BOARD[{x + 1}][{y + 1}] = EMPTY_SQUARE");
				}
			}
		}
		_script.DoString(sb.ToString());
	}

	private void Update() {
		var test = _value.Trim();
		_script.DoString(_value.Trim());
		var canMove = _script.Call(_script.Globals["canMove"], 1, 1, 1, 1, 2).Boolean;
	}

	private void ClickOn(int x, int y) {
		if (_clicked != null && _visualClasses[x, y] == "can-move") {
			var (fromX, fromY) = _clicked.Value;
			_board.Pieces[x, y] = _board.Pieces[fromX, fromY];
			_board.Pieces[fromX, fromY] = null;
			_connection.SendAsync("SendBoard", _board);
			_clicked = null;
			GenerateScriptBoard();
			_visualClasses.Fill("");
		} else {
			if (_board.Pieces[x, y] is { } piece) {
				if (_clicked != null) {
					var (oldX, oldY) = _clicked.Value;
					_visualClasses[oldX, oldY] = "";
					_clicked = null;
				}
				_clicked = (x, y);
				_script.DoString(PieceData.Basics[piece.Name].MoveScript);
				/*foreach (var (xi, yi) in _board) {
					var canMove = _script.Call(_script.Globals["canMove"], piece.Color, x + 1, y + 1, xi + 1, yi + 1).Boolean;
					_visualClasses[xi, yi] = canMove ? "can-move" : "";
				}*/
				_visualClasses.Fill("");
				if (_script.Globals["getValidMoves"] is not null) {
					var test = _script.Call(_script.Globals["getValidMoves"], piece.Color, x + 1, y + 1);
					foreach (var (xi, yi) in _script.Call(_script.Globals["getValidMoves"], piece.Color, x + 1, y + 1).Table.Values
						.Choose(x => x.ToPosition())
						.Where(x => x.X >= 0 && x.Y >= 0 && x.X < _board.Width && x.Y < _board.Height)) {
						_visualClasses[xi, yi] = "can-move";
					}
				}
				_visualClasses[x, y] = "clicked";
			} else {
				_visualClasses.Fill("");
			}
		}
	}

	public async ValueTask DisposeAsync() {
		if (_connection is not null) {
			await _connection.DisposeAsync();
		}
	}
}
